#+TITLE: config

* Visuals
#+BEGIN_SRC emacs-lisp
(setq-default display-line-numbers 'visual)
(setq display-line-numbers 'visual)
(setq doom-line-numbers-style 'visual)
(menu-bar-mode 1)
#+END_SRC

#+RESULTS:
: t

* Ruby
#+BEGIN_SRC emacs-lisp
(projectile-rails-global-mode)
;; (global-rbenv-mode)
(defun start-rails-server ()
  "Start the rails server"
  (interactive)
  (set-process-sentinel
   (start-process-shell-command "rails server" "rails server" (concat (projectile-rails-root) "bin/rails server"))
   (lambda (p _m)
     (when (eq 0 (process-exit-status p))
       (with-current-buffer (process-buffer p)
         (ansi-color-apply-on-region (point-min) (point-max))))))

  )
(map! :n :prefix ","
      (:desc "Test project" :n "t" #'projectile-test-project)
      (:desc "Start rails server" :n "S" #'start-rails-server)
      )
#+END_SRC

#+RESULTS:

* Orgmode
#+NAME: Testing
#+BEGIN_SRC emacs-lisp
(setq org-directory "~/Dropbox/Notes")
(require 'ox-md)
;(org-babel-do-load-languages
;    'org-babel-load-languages
;    '((emacs-lisp . t)
;      (sh . t)
;      (python . t)
;      (ruby . t)
;    )
; )

#+END_SRC

#+RESULTS: Testing
: ox-md

#+RESULTS:
: ~/Dropbox/Notes
* Email
** Setup folders
#+BEGIN_SRC emacs-lisp
  (setq mu4e-maildir "~/email"
        mu4e-trash-folder "/Trash"
        mu4e-refile-folder "/Archive"
        mu4e-get-mail-command "mbsync -a"
        mu4e-update-interval nil
        mu4e-compose-signature-auto-include nil
        mu4e-view-show-images t
        mu4e-view-show-addresses t)
#+END_SRC

#+RESULTS:
: t
** Contexts
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'mu4e (setq mu4e-contexts
        `(
          ,(make-mu4e-context
            :name "hcode"
            :enter-func (lambda () (mu4e-message "Entering HCODE context"))
            :match-func (lambda(msg)
                          (when msg
                            (string-match-p "^/hcode" (mu4e-message-field msg :maildir))))
            :vars '(
                    (user-mail-address . "jelle.helsen@hcode.be")
                    (user-full-name    . "Jelle Helsen")
                    (mu4e-compose-signature . "With kind regards,\nJelle Helsen")
                    )
            )
          ,(make-mu4e-context
            :name "devoteam"
            :enter-func (lambda () (mu4e-message "Entering DevoTeam context"))
            :match-func (lambda(msg)
                          (when msg
                            (string-match-p "^/devoteam" (mu4e-message-field msg :maildir))))
            :vars '(
                    (user-mail-address . "jelle.helsen@devoteam.com")
                    (user-full-name    . "Jelle Helsen")
                    (mu4e-compose-signature . "With kind regards,\nJelle Helsen")
                    )
            )
          )
        ) )
#+END_SRC

#+RESULTS:
** Shortcuts
#+BEGIN_SRC emacs-lisp
  (setq mu4e-maildir-shortcuts
        '(
          ("/hcode/INBOX" . ?g)
          ("/devoteam/INBOX" . ?d)
          ))
#+END_SRC

#+RESULTS:
: ((/hcode/INBOX . 103) (/devoteam/INBOX . 100))
** Bookmarks
#+BEGIN_SRC emacs-lisp
  (setq mu4e-bookmarks
        `(("flag:unread AND NOT flag:trashed" "Unread messages" ?u)
          ("date:today..now" "Today's messages" ?t)
          ("date:7d..now" "Last 7 days" ?w)
          ("mime:image/*" "Messages with images" ?p)
          (,(mapconcat 'identity
                       (mapcar
                        (lambda (maildir)
                          (concat "maildir:" (car maildir)))
                        mu4e-maildir-shortcuts) " OR ")
           "All inboxes" ?i)))
#+END_SRC

#+RESULTS:
| flag:unread AND NOT flag:trashed                | Unread messages      | 117 |
| date:today..now                                 | Today's messages     | 116 |
| date:7d..now                                    | Last 7 days          | 119 |
| mime:image/*                                    | Messages with images | 112 |
| maildir:/hcode/INBOX OR maildir:/devoteam/INBOX | All inboxes          | 105 |
** Sending
#+BEGIN_SRC emacs-lisp
(setq message-send-mail-function 'smtpmail-send-it
      smtpmail-default-smtp-server "smtp.gmail.com"
      smtpmail-stream-type  'ssl
      smtpmail-smtp-service 465
      )
#+END_SRC
* Confluence
#+BEGIN_SRC emacs-lisp
(require 'confluence)
(setq confluence-url "https://wikiprojects.upc.biz/rpc/xmlrpc")
(with-eval-after-load 'org-jira (setq jiralib-url "https://jira.lgi.io"))
#+END_SRC
* Apps menu
#+BEGIN_SRC emacs-lisp
(map! :leader
     (:desc "Apps" :prefix "a"
       :desc "Email" :n "m" #'mu4e
       :desc "IRC" :n "i" #'irc
       ))
#+END_SRC

#+RESULTS:
* Key bindings
#+BEGIN_SRC emacs-lisp
(map! :leader
 (:desc "project" :prefix "p"
        :desc "Browse project"          :n  "." #'+default/browse-project
        :desc "Find file in project"    :n  "/" #'projectile-find-file
        :desc "Run cmd in project root" :nv "!" #'projectile-run-shell-command-in-root
        :desc "Compile project"         :n  "c" #'projectile-compile-project
        :desc "Test project"            :n  "t" #'projectile-test-project
        :desc "Find other file"         :n  "o" #'projectile-find-other-file
        :desc "Switch project"          :n  "p" #'projectile-switch-project
        :desc "Recent project files"    :n  "r" #'projectile-recentf
        :desc "List project tasks"      :n  "T" #'+ivy/tasks
        :desc "Invalidate cache"        :n  "x" #'projectile-invalidate-cache)     )

#+END_SRC

#+RESULTS:
* Node
#+BEGIN_SRC emacs-lisp
(nvm-use "10.11.0")
(setq exec-path (append '("~/.nvm/versions/node/v10.11.0/bin/") exec-path))
(setenv "PATH" (concat "~/.nvm/versions/node/v10.11.0/bin/:" (getenv "PATH")))
#+END_SRC

#+RESULTS:
: ~/.nvm/versions/node/v10.11.0/bin/:/home/jelle/.nvm/versions/node/v10.11.0/bin/:/home/jelle/.rbenv/bin/:/home/jelle/.rbenv/shims/:/home/jelle/.local/bin/:/usr/local/sbin/:/usr/local/bin/:/usr/sbin/:/usr/bin/:/sbin/:/bin/:/usr/games/:/usr/local/games/:/snap/bin/

* Defaults
#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
(setq tab-width 2)
(setq-default tab-width 2)
(setq evil-shift-width 2)
(setq-default evil-shift-width 2)
(setq-default doom-line-numbers-style 'visual)
(setq doom-line-numbers-style 'visual)
(setq display-line-numbers 'visual)
(setq-default display-line-numbers 'visual)
;; (setq visual-line-mode t)
(setq display-line-numbers-type 'visual)
;; (global-visual-line-mode)
#+END_SRC

#+RESULTS:
: visual
* Golang
#+BEGIN_SRC emacs-lisp
(setenv "PATH" (concat "~/go/bin/:" (getenv "PATH")))
(add-to-list 'load-path "~/go/bin/")
#+END_SRC

#+RESULTS:
* Yaml
#+BEGIN_SRC emacs-lisp
(setq yaml-indent-level 2)
#+END_SRC

#+RESULTS:
: 2
