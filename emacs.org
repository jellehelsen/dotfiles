#+TITLE: Emacs configuration
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/init.el
* Basics
  #+begin_src emacs-lisp
    ;; (make-directory "~/.emacs.d/" t)
    (add-to-list 'exec-path "/usr/local/bin")
    (setq backup-directory-alist (list (cons "." "~/.caches/emacs.saves/")))
    (setq confirm-kill-emacs #'yes-or-no-p)
    (prefer-coding-system 'utf-8)
    (set-default-coding-systems 'utf-8)
    (set-terminal-coding-system 'utf-8)
    (set-keyboard-coding-system 'utf-8)

    ;; Don't generate backups or lockfiles. While auto-save maintains a copy so long
    ;; as a buffer is unsaved, backups create copies once, when the file is first
    ;; written, and never again until it is killed and reopened. This is better
    ;; suited to version control, and I don't want world-readable copies of
    ;; potentially sensitive material floating around our filesystem.
    (setq create-lockfiles nil
	  make-backup-files nil
	  ;; But in case the user does enable it, some sensible defaults:
	  version-control t     ; number each backup file
	  backup-by-copying t   ; instead of renaming current file (clobbers links)
	  delete-old-versions t ; clean up after itself
	  kept-old-versions 5
	  kept-new-versions 5
	  backup-directory-alist (list (cons "." (concat "~/.cache/" "backup/")))
	  tramp-backup-directory-alist backup-directory-alist)

  #+end_src

  #+RESULTS:
  : ((. . ~/.cache/backup/))

* Startup performance 
  Make startup faster by reducing the frequency of garbage collection.
  Also use a hook to measure startup time
  #+begin_src emacs-lisp
  ;; The default is 800kB. Measured in bytes
  (setq gc-cons-threshold (* 50 1000 1000))
  
  ;; Profile emacs startup
 (add-hook 'emacs-startup-hook
  (lambda ()
	(message "*** Emacs loaded in %s with %d garbage collections."
	(format "%.2f seconds" (float-time (time-subtract after-init-time before-init-time)))
	gcs-done))
)
  #+end_src

  #+RESULTS:
  | lambda | nil | (message *** Emacs loaded in %s with %d garbage collections. (format %.2f seconds (float-time (time-subtract after-init-time before-init-time))) gcs-done)  |
  | lambda | nil | (message *** Emacs loaded in %s with %d garbage collections. (format %.2f seconds (float-time (time-substract after-init-time before-init-time))) gcs-done) |

* Package management
  First setup package management as we need use-package later on.
  #+begin_src emacs-lisp
  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			  ("org" . "https://orgmode.org/elpa/")
			  ("elpa" . "https://elpa.gnu.org/packages/")))

  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
  (require 'use-package)
  (setq use-package-always-ensure t)
  #+end_src

  #+RESULTS:
  : t
* Visuals
** Basics
  Make the user interface more minimal
  #+begin_src emacs-lisp
      (setq inhibit-startup-message t)
      (setq visible-bell t)
      (scroll-bar-mode -1)        ; Disable visible scrollbar
      (tool-bar-mode -1)          ; Disable the toolbar
      (tooltip-mode -1)           ; Disable tooltips
      (set-fringe-mode 10)        ; Give some breathing room

      (fset #'yes-or-no-p #'y-or-n-p)
  #+end_src

#+RESULTS:
: y-or-n-p
** Line numbers
  Enable and configure line numbers.
  #+begin_src emacs-lisp
  (setq display-line-numbers-type 'visual)
  (global-display-line-numbers-mode)
  (column-number-mode)
  
  (dolist (mode '(eshell-mode-hook
		  shell-mode-hook))
    (add-hook mode (lambda()(display-line-numbers-mode 0)))
  )
  #+end_src

  #+RESULTS:

** Theme
   #+begin_src emacs-lisp
     (use-package doom-themes :config
     (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
      doom-themes-enable-italic t) ; if nil, italics is universally disabled
     (load-theme 'doom-dark+ t)
     ;; Enable flashing mode-line on errors
     (doom-themes-visual-bell-config)

     ;; Enable custom neotree theme (all-the-icons must be installed!)
     (doom-themes-neotree-config)
     ;; or for treemacs users
     (setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
     (doom-themes-treemacs-config)

     ;; Corrects (and improves) org-mode's native fontification.
     (doom-themes-org-config)
     )
   #+end_src

   #+RESULTS:
   : t

** Mode Line
#+begin_src emacs-lisp
  (setq
   display-time-format "%l:%m %p %b %y"
   display-time-default-load-average nil
   )
  (use-package minions
    :hook (doom-modeline-mode . minions-mode)
    )
  (use-package doom-modeline
    :hook (after-init . doom-modeline-init)
    :custom-face
    ;; (mode-line ((t (:height 0.8))))
    ;; (mode-line-inactive ((t (:height 0.75))))
    :custom
    (doom-modeline-height 25)
    (doom-modeline-bar-width 3)
    (doom-modeline-minor-modes t)
    (doom-modeline-persp-name t)
    (doom-modeline-window-width-limit nil)
    )
#+end_src

#+RESULTS:

** Font setup
#+begin_src emacs-lisp
  (set-face-attribute 'default nil :font "Meslo LG L" :height 150) 
  (set-face-attribute 'fixed-pitch nil :font "Meslo LG L" :height 150) 
  (set-face-attribute 'variable-pitch nil :font "Meslo LG L" :height 140) 
 #+end_src

   #+RESULTS:

** Helpful
Improved help functions.
#+begin_src emacs-lisp
  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-command] . helpful-command)
    ([remap describe-key] . helpful-key)
    )
   #+end_src

   #+RESULTS:
   : helpful-key

** Misc
Show the max line length (80) and highlight the current line.
Highlight TODO and FIXME keywords.
#+begin_src emacs-lisp
  (global-display-fill-column-indicator-mode 1)
  (global-hl-line-mode 1)
  (global-hl-todo-mode 1)
#+end_src

#+RESULTS:
: t

* Automatically tangle on save
#+begin_src emacs-lisp
(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'org-babel-tangle)))
#+end_src

#+RESULTS:
| #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes | (lambda nil (add-hook 'after-save-hook #'org-babel-tangle)) |
* Server Mode
#+begin_src emacs-lisp
(server-mode)
#+end_src

#+RESULTS:
: t

* Tramp
#+BEGIN_SRC emacs-lisp
    (require 'tramp)
  (setq tramp-default-method "ssh")
  (tramp-set-completion-function "ssh"
				 '((tramp-parse-sconfig "/etc/ssh_config")
				   (tramp-parse-sconfig "~/.ssh/config")))

#+END_SRC

#+RESULTS:
| ssh      | (tramp-parse-sconfig ~/.ssh/config)   |                                         |                                     |
| adb      | (tramp-adb-parse-device-names )       |                                         |                                     |
| rclone   | (tramp-rclone-parse-device-names )    |                                         |                                     |
| fcp      | (tramp-parse-rhosts /etc/hosts.equiv) | (tramp-parse-shosts ~/.ssh/known_hosts) | (tramp-parse-sconfig ~/.ssh/config) |
| psftp    | (tramp-parse-rhosts /etc/hosts.equiv) | (tramp-parse-shosts ~/.ssh/known_hosts) | (tramp-parse-sconfig ~/.ssh/config) |
| pscp     | (tramp-parse-rhosts /etc/hosts.equiv) | (tramp-parse-shosts ~/.ssh/known_hosts) | (tramp-parse-sconfig ~/.ssh/config) |
| plink    | (tramp-parse-rhosts /etc/hosts.equiv) | (tramp-parse-shosts ~/.ssh/known_hosts) | (tramp-parse-sconfig ~/.ssh/config) |
| krlogin  | (tramp-parse-rhosts /etc/hosts.equiv) |                                         |                                     |
| sg       | (tramp-parse-etc-group /etc/group)    |                                         |                                     |
| ksu      | (tramp-parse-passwd /etc/passwd)      |                                         |                                     |
| doas     | (tramp-parse-passwd /etc/passwd)      |                                         |                                     |
| sudo     | (tramp-parse-passwd /etc/passwd)      |                                         |                                     |
| su       | (tramp-parse-passwd /etc/passwd)      |                                         |                                     |
| nc       | (tramp-parse-hosts /etc/hosts)        |                                         |                                     |
| telnet   | (tramp-parse-hosts /etc/hosts)        |                                         |                                     |
| sshx     | (tramp-parse-rhosts /etc/hosts.equiv) | (tramp-parse-shosts ~/.ssh/known_hosts) | (tramp-parse-sconfig ~/.ssh/config) |
| remsh    | (tramp-parse-rhosts /etc/hosts.equiv) |                                         |                                     |
| rsh      | (tramp-parse-rhosts /etc/hosts.equiv) |                                         |                                     |
| rsync    | (tramp-parse-rhosts /etc/hosts.equiv) | (tramp-parse-shosts ~/.ssh/known_hosts) | (tramp-parse-sconfig ~/.ssh/config) |
| scpx     | (tramp-parse-rhosts /etc/hosts.equiv) | (tramp-parse-shosts ~/.ssh/known_hosts) | (tramp-parse-sconfig ~/.ssh/config) |
| scp      | (tramp-parse-rhosts /etc/hosts.equiv) | (tramp-parse-shosts ~/.ssh/known_hosts) | (tramp-parse-sconfig ~/.ssh/config) |
| remcp    | (tramp-parse-rhosts /etc/hosts.equiv) |                                         |                                     |
| rcp      | (tramp-parse-rhosts /etc/hosts.equiv) |                                         |                                     |
| sudoedit | (tramp-parse-passwd /etc/passwd)      |                                         |                                     |
* Snippets
#+begin_src emacs-lisp
(use-package yasnippet :config (yas-global-mode 1))
(use-package yasnippet-snippets)
#+end_src

#+RESULTS:
* Keyboard bindings
** ESC cancels all
   #+begin_src emacs-lisp
   (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
   #+end_src

#+RESULTS:
: keyboard-escape-quit
** Rebind C-u
   #+begin_src emacs-lisp
   (global-set-key (kbd "C-M-u") 'universal-argument)
   #+end_src

#+RESULTS:
: universal-argument

** Evil mode
   #+begin_src emacs-lisp
     (use-package undo-tree
     :init (global-undo-tree-mode 1)
     )
     (use-package evil
       :init 
	   (setq 
	      evil-want-integration t
	      evil-want-keybinding nil
	      evil-respect-visual-line-mode t
	      evil-want-C-u-scroll t
	      evil-want-C-i-jump nil
	      evil-undo-system 'undo-tree
	  )
       :config
	   (evil-mode 1)
	   (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
	   (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)
	   ;; Use visual line motions even outside of visual-line-mode buffers
	   ;; (evil-global-set-key 'motion "j" 'evil-next-visual-line)
	   ;; (evil-global-set-key 'motion "k" 'evil-previous-visual-line)
      )
      (use-package evil-collection
       :after evil
       :config
	   (evil-collection-init)
      )
      (use-package evil-surround
	  :config (global-evil-surround-mode 1)
      )
    #+end_src

   #+RESULTS:
   : t
** Leader bindings (General)
   #+begin_src emacs-lisp
   (use-package general
     :config
     (general-evil-setup t)
     (general-create-definer jh/leader-key-def
     :keymaps '(normal insert visual emacs)
     :prefix "SPC"
     :global-prefix "M-SPC"
     )
    )
    (jh/leader-key-def
    "t" '(:ignore t :which-key "toggles")
    "tw" 'whitespace-mode
    )
   #+end_src

   #+RESULTS:
** Keybinding Panel (which-key)
   #+begin_src emacs-lisp
   (use-package which-key
     :init (which-key-mode)
     :diminish which-key-mode
     :config (setq which-key-idle-delay 0.01)
    )
   #+end_src

   #+RESULTS:
   : t

* Better completions with Ivy
  #+begin_src emacs-lisp
  (use-package ivy
    :diminish
    :bind (
    ("C-s" . swiper)
    :map ivy-minibuffer-map
    ("TAB" . ivy-alt-done)
    ("C-j" . ivy-next-line)
    ("C-k" . ivy-previous-line)
    )
    :init
    (ivy-mode 1)
  )
  (use-package counsel
    :after ivy
    :bind (("M-x" . counsel-M-x))
  )
  (use-package ivy-rich 
  :init (ivy-rich-mode 1))
  #+end_src

  #+RESULTS:

* Org mode
** Setup
   #+begin_src emacs-lisp
     (use-package org
       :init   (setq org-directory "~/org")
       :config
       (require 'ol-gnus)
       (setq 
        org-hide-emphasis-markers t
        org-src-fontify-natively t
        org-src-tab-acts-natively t
        org-edit-src-content-indentation 2
        org-hide-block-startup nil
        org-src-preserve-indentation nil
        org-cycle-separator-lines 2)

       (setq org-modules
             '(org-crypt
               org-habit
               ol-bookmark
               ol-eshell
               org-id
               ol-gnus
               ))
       (org-indent-mode)
       (variable-pitch-mode 1)
       (auto-fill-mode 1)
       (visual-line-mode 1)
       (setq evil-auto-indent nil) )
     (use-package org-chef)
   #+end_src

   #+RESULTS:

** Fonts and bullets
   Use bullet characters instead of asterisks and set the header size.
   #+begin_src emacs-lisp
     (use-package org-superstar
       :after org
       :init (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))
       )

     (set-face-attribute 'org-document-title nil :weight 'bold :height 1.3)

     ;; Make sure org-indent face is available
     (require 'org-indent)

     ;; Ensure that anything that should be fixed-pitch in Org files appears that way
     (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
     (set-face-attribute 'org-table nil  :inherit 'fixed-pitch)
     (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
     (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
     (set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))
     (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
     (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
     (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
     (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)


   #+end_src

   #+RESULTS:
** Code block templates
These template are shortcuts for code blocks. It enables you to type things like <el and then hit Tab to expand to a emacs-lisp block
#+begin_src emacs-lisp
(require 'org-tempo) 
(add-to-list 'org-structure-template-alist '("sh" . "src sh"))
(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
(add-to-list 'org-structure-template-alist '("sc" . "src scheme"))
(add-to-list 'org-structure-template-alist '("ts" . "src typescript"))
(add-to-list 'org-structure-template-alist '("py" . "src python"))
(add-to-list 'org-structure-template-alist '("yaml" . "src yaml"))
(add-to-list 'org-structure-template-alist '("json" . "src json"))

#+end_src

#+RESULTS:
: ((json . src json) (yaml . src yaml) (py . src python) (ts . src typescript) (sc . src scheme) (el . src emacs-lisp) (sh . src sh) (a . export ascii) (c . center) (C . comment) (e . example) (E . export) (h . export html) (l . export latex) (q . quote) (s . src) (v . verse))

** Capture
#+BEGIN_SRC emacs-lisp
(require 'org-protocol)
(require 'ol-gnus)
(setq org-capture-templates '(
  ("t" "Todo [inbox]" entry
      (file+headline "~/gtd/inbox.org" "Tasks") "* TODO %i%?, Link: %a")
  ("T" "Tickler" entry
      (file+headline "~/gtd/tickler.org" "Tickler") "* %i%? \n %U")
  ("l" "Temp Links from the interwebs" entry
      (file+headline "~/gtd/links.org" "Temporary Links")
          "* %a\n%?\nEntered on %U\n \%i\n")
  ("c" "Cookbook" entry (file "~/org/cookbook.org")
      "%(org-chef-get-recipe-from-url)" :empty-lines 1)
  ("m" "Manual Cookbook" entry (file "~/org/cookbook.org")
      "* %^{Recipe title: }\n  :PROPERTIES:\n  :source-url:\n  :servings:\n  :prep-time:\n  :cook-time:\n  :ready-in:\n  :END:\n** Ingredients\n   %?\n** Directions\n\n")
                              ))
(defadvice org-capture
    (after make-full-window-frame activate)
  "Advise capture to be the only window when used as a popup"
  (if (equal "emacs-capture" (frame-parameter nil 'name))
      (delete-other-windows)))

(defadvice org-capture-finalize
    (after delete-capture-frame activate)
  "Advise capture-finalize to close the frame"
  (if (equal "emacs-capture" (frame-parameter nil 'name))
      (delete-frame)))
#+END_SRC

#+RESULTS:
: org-capture-finalize

** Agenda
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files '("~/gtd/inbox.org"
			   "~/gtd/gtd.org"
			   "~/gtd/tickler.org"))
  (setq org-todo-keywords '((sequence "TODO(t)" "WAITING(w)" "|" "DONE(d)" "CANCELLED(c)")))
  (setq org-time-stamp-custom-formats '("<%d/%m/%Y %a>" . "<%d/%m/%Y %a %H:%M>"))
  (setq org-display-custom-times t)

#+END_SRC

#+RESULTS:

** Refiling
#+BEGIN_SRC emacs-lisp
(setq org-refile-targets '(("~/gtd/gtd.org" :maxlevel . 2)
                           ("~/gtd/someday.org" :level . 1)
                           ("~/gtd/tickler.org" :maxlevel . 2)))
#+END_SRC

#+RESULTS:
: ((~/gtd/gtd.org :maxlevel . 3) (~/gtd/someday.org :level . 1) (~/gtd/tickler.org :maxlevel . 2))

** Notes
  #+begin_src emacs-lisp
    (setq notes-folder "~/Dropbox/Notes/")
    (defun browse-notes()
      (interactive)
      (counsel-find-file nil notes-folder)
      )
  #+end_src

  #+RESULTS:
  : browse-notes

** Key bindings
   #+begin_src emacs-lisp
     (jh/leader-key-def
       "o" '(:ignore t :which-key "org")
       "oa" '(org-agenda :which-key "agenda")
       "on" '(browse-notes :which-key "Browse notes")
       "ot" '(org-todo :which-key "Todo")
       "os" '(org-schedule :which-key "Schedule")
       "od" '(org-deadline :which-key "Set Deadline")
       "oc" '(org-capture :which-key "Capture")
       )
   #+end_src

   #+RESULTS:

** Babel
   #+begin_src emacs-lisp
     (use-package ob-restclient)
     (org-babel-do-load-languages
      'org-babel-load-languages
      '((python . t)
	(restclient . t)
	(emacs-lisp . t)
	(shell . t)
	)
      )

   #+end_src

   #+RESULTS:

* Buffer and file management
** File management
   #+begin_src emacs-lisp
   (use-package recentf :init (recentf-mode))
   (jh/leader-key-def
    "f" '(:ignore t :which-key "files")
    "ff" '(counsel-find-file :which-key "open file")
    "fr" '(counsel-recentf :which-key "recent files")
   )
   #+end_src

   #+RESULTS:

** Buffer management
  #+begin_src emacs-lisp
  (jh/leader-key-def
   "b" '(:ignore t :which-key "buffers")
   "bo" '(counsel-ibuffer :which-key "open buffer")
   "bk" '(kill-current-buffer :which-key "Kill current buffer")
   "bn" '(next-buffer :which-key "Next buffer")
   "bp" '(previous-buffer :which-key "Previous buffer")
  )
  #+end_src

  #+RESULTS:
* Development
** Flycheck
   #+begin_src emacs-lisp
   (use-package flycheck)
   #+end_src

   #+RESULTS:

** Languages
*** Python
    #+begin_src emacs-lisp
      (use-package python)
    #+end_src

    #+RESULTS:
*** Markdown
    #+begin_src emacs-lisp
      (use-package markdown-mode
	:mode ("/README\\(?:\\.md\\)?\\'" . gfm-mode)
	:init
	(setq markdown-enable-math t ; syntax highlighting for latex fragments
	      markdown-enable-wiki-links t
	      markdown-italic-underscore t
	      markdown-asymmetric-header t
	      markdown-fontify-code-blocks-natively t
	      markdown-gfm-additional-languages '("sh")
	      markdown-make-gfm-checkboxes-buttons t

	      ;; `+markdown-compile' offers support for many transpilers (see
	      ;; `+markdown-compile-functions'), which it tries until one succeeds.
	      markdown-command "pandoc"
	      ;; This is set to `nil' by default, which causes a wrong-type-arg error
	      ;; when you use `markdown-open'. These are more sensible defaults.
	      markdown-open-command "open"

	      ;; A sensible and simple default preamble for markdown exports that
	      ;; takes after the github asthetic (plus highlightjs syntax coloring).
	      markdown-content-type "application/xhtml+xml"
	      markdown-css-paths
	      '("https://cdn.jsdelivr.net/npm/github-markdown-css/github-markdown.min.css"
		"https://cdn.jsdelivr.net/gh/highlightjs/cdn-release/build/styles/github.min.css")
	      markdown-xhtml-header-content
	      (concat "<meta name='viewport' content='width=device-width, initial-scale=1, shrink-to-fit=no'>"
		      "<style> body { box-sizing: border-box; max-width: 740px; width: 100%; margin: 40px auto; padding: 0 10px; } </style>"
		      "<script id='MathJax-script' async src='https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js'></script>"
		      "<script src='https://cdn.jsdelivr.net/gh/highlightjs/cdn-release/build/highlight.min.js'></script>"
		      "<script>document.addEventListener('DOMContentLoaded', () => { document.body.classList.add('markdown-body'); document.querySelectorAll('pre[lang] > code').forEach((code) => { code.classList.add(code.parentElement.lang); }); document.querySelectorAll('pre > code').forEach((code) => { hljs.highlightBlock(code); }); });</script>"))

	)
    #+end_src

    #+RESULTS:
    : ((Procfile\' . yaml-mode) (/\(?:Brew\|Fast\)file\' . ruby-mode) (\.\(?:a?rb\|aslsx\)\' . ruby-mode) (/README\(?:\.md\)?\' . gfm-mode) (\.gpg\(~\|\.~[0-9]+~\)?\' nil epa-file) (\.editorconfig\' . editorconfig-conf-mode) (go\.mod\' . go-dot-mod-mode) (\.go\' . go-mode) (/git-rebase-todo\' . git-rebase-mode) (\.\(?:md\|markdown\|mkd\|mdown\|mkdn\|mdwn\)\' . markdown-mode) (\.sol\' . solidity-mode) (\.tf\(vars\)?\' . terraform-mode) (\.nomad\' . hcl-mode) (\.hcl\' . hcl-mode) (\.\(e?ya?\|ra\)ml\' . yaml-mode) (\.elc\' . elisp-byte-code-mode) (\.zst\' nil jka-compr) (\.dz\' nil jka-compr) (\.xz\' nil jka-compr) (\.lzma\' nil jka-compr) (\.lz\' nil jka-compr) (\.g?z\' nil jka-compr) (\.bz2\' nil jka-compr) (\.Z\' nil jka-compr) (\.vr[hi]?\' . vera-mode) (\(?:\.\(?:rbw?\|ru\|rake\|thor\|jbuilder\|rabl\|gemspec\|podspec\)\|/\(?:Gem\|Rake\|Cap\|Thor\|Puppet\|Berks\|Vagrant\|Guard\|Pod\)file\)\' . ruby-mode) (\.re?st\' . rst-mode) (\.py[iw]?\' . python-mode) (\.m\' . octave-maybe-mode) (\.less\' . less-css-mode) (\.scss\' . scss-mode) (\.awk\' . awk-mode) (\.\(u?lpc\|pike\|pmod\(\.in\)?\)\' . pike-mode) (\.idl\' . idl-mode) (\.java\' . java-mode) (\.m\' . objc-mode) (\.ii\' . c++-mode) (\.i\' . c-mode) (\.lex\' . c-mode) (\.y\(acc\)?\' . c-mode) (\.h\' . c-or-c++-mode) (\.c\' . c-mode) (\.\(CC?\|HH?\)\' . c++-mode) (\.[ch]\(pp\|xx\|\+\+\)\' . c++-mode) (\.\(cc\|hh\)\' . c++-mode) (\.\(bat\|cmd\)\' . bat-mode) (\.[sx]?html?\(\.[a-zA-Z_]+\)?\' . mhtml-mode) (\.svgz?\' . image-mode) (\.svgz?\' . xml-mode) (\.x[bp]m\' . image-mode) (\.x[bp]m\' . c-mode) (\.p[bpgn]m\' . image-mode) (\.tiff?\' . image-mode) (\.gif\' . image-mode) (\.png\' . image-mode) (\.jpe?g\' . image-mode) (\.te?xt\' . text-mode) (\.[tT]e[xX]\' . tex-mode) (\.ins\' . tex-mode) (\.ltx\' . latex-mode) (\.dtx\' . doctex-mode) (\.org\' . org-mode) (\.el\' . emacs-lisp-mode) (Project\.ede\' . emacs-lisp-mode) (\.\(scm\|stk\|ss\|sch\)\' . scheme-mode) (\.l\' . lisp-mode) (\.li?sp\' . lisp-mode) (\.[fF]\' . fortran-mode) (\.for\' . fortran-mode) (\.p\' . pascal-mode) (\.pas\' . pascal-mode) (\.\(dpr\|DPR\)\' . delphi-mode) (\.ad[abs]\' . ada-mode) (\.ad[bs]\.dg\' . ada-mode) (\.\([pP]\([Llm]\|erl\|od\)\|al\)\' . perl-mode) (Imakefile\' . makefile-imake-mode) (Makeppfile\(?:\.mk\)?\' . makefile-makepp-mode) (\.makepp\' . makefile-makepp-mode) (\.mk\' . makefile-bsdmake-mode) (\.make\' . makefile-bsdmake-mode) (GNUmakefile\' . makefile-gmake-mode) ([Mm]akefile\' . makefile-bsdmake-mode) (\.am\' . makefile-automake-mode) (\.texinfo\' . texinfo-mode) (\.te?xi\' . texinfo-mode) (\.[sS]\' . asm-mode) (\.asm\' . asm-mode) (\.css\' . css-mode) (\.mixal\' . mixal-mode) (\.gcov\' . compilation-mode) (/\.[a-z0-9-]*gdbinit . gdb-script-mode) (-gdb\.gdb . gdb-script-mode) ([cC]hange\.?[lL]og?\' . change-log-mode) ([cC]hange[lL]og[-.][0-9]+\' . change-log-mode) (\$CHANGE_LOG\$\.TXT . change-log-mode) (\.scm\.[0-9]*\' . scheme-mode) (\.[ckz]?sh\'\|\.shar\'\|/\.z?profile\' . sh-mode) (\.bash\' . sh-mode) (\(/\|\`\)\.\(bash_\(profile\|history\|log\(in\|out\)\)\|z?log\(in\|out\)\)\' . sh-mode) (\(/\|\`\)\.\(shrc\|zshrc\|m?kshrc\|bashrc\|t?cshrc\|esrc\)\' . sh-mode) (\(/\|\`\)\.\([kz]shenv\|xinitrc\|startxrc\|xsession\)\' . sh-mode) (\.m?spec\' . sh-mode) (\.m[mes]\' . nroff-mode) (\.man\' . nroff-mode) (\.sty\' . latex-mode) (\.cl[so]\' . latex-mode) (\.bbl\' . latex-mode) (\.bib\' . bibtex-mode) (\.bst\' . bibtex-style-mode) (\.sql\' . sql-mode) (\(acinclude\|aclocal\|acsite\)\.m4\' . autoconf-mode) (\.m[4c]\' . m4-mode) (\.mf\' . metafont-mode) (\.mp\' . metapost-mode) (\.vhdl?\' . vhdl-mode) (\.article\' . text-mode) (\.letter\' . text-mode) (\.i?tcl\' . tcl-mode) (\.exp\' . tcl-mode) (\.itk\' . tcl-mode) (\.icn\' . icon-mode) (\.sim\' . simula-mode) (\.mss\' . scribe-mode) (\.f9[05]\' . f90-mode) (\.f0[38]\' . f90-mode) (\.indent\.pro\' . fundamental-mode) (\.\(pro\|PRO\)\' . idlwave-mode) (\.srt\' . srecode-template-mode) (\.prolog\' . prolog-mode) (\.tar\' . tar-mode) (\.\(arc\|zip\|lzh\|lha\|zoo\|[jew]ar\|xpi\|rar\|cbr\|7z\|ARC\|ZIP\|LZH\|LHA\|ZOO\|[JEW]AR\|XPI\|RAR\|CBR\|7Z\)\' . archive-mode) (\.oxt\' . archive-mode) (\.\(deb\|[oi]pk\)\' . archive-mode) (\`/tmp/Re . text-mode) (/Message[0-9]*\' . text-mode) (\`/tmp/fol/ . text-mode) (\.oak\' . scheme-mode) (\.sgml?\' . sgml-mode) (\.x[ms]l\' . xml-mode) (\.dbk\' . xml-mode) (\.dtd\' . sgml-mode) (\.ds\(ss\)?l\' . dsssl-mode) (\.js[mx]?\' . javascript-mode) (\.har\' . javascript-mode) (\.json\' . javascript-mode) (\.[ds]?va?h?\' . verilog-mode) (\.by\' . bovine-grammar-mode) (\.wy\' . wisent-grammar-mode) ([:/\]\..*\(emacs\|gnus\|viper\)\' . emacs-lisp-mode) (\`\..*emacs\' . emacs-lisp-mode) ([:/]_emacs\' . emacs-lisp-mode) (/crontab\.X*[0-9]+\' . shell-script-mode) (\.ml\' . lisp-mode) (\.ld[si]?\' . ld-script-mode) (ld\.?script\' . ld-script-mode) (\.xs\' . c-mode) (\.x[abdsru]?[cnw]?\' . ld-script-mode) (\.zone\' . dns-mode) (\.soa\' . dns-mode) (\.asd\' . lisp-mode) (\.\(asn\|mib\|smi\)\' . snmp-mode) (\.\(as\|mi\|sm\)2\' . snmpv2-mode) (\.\(diffs?\|patch\|rej\)\' . diff-mode) (\.\(dif\|pat\)\' . diff-mode) (\.[eE]?[pP][sS]\' . ps-mode) (\.\(?:PDF\|DVI\|OD[FGPST]\|DOCX\|XLSX?\|PPTX?\|pdf\|djvu\|dvi\|od[fgpst]\|docx\|xlsx?\|pptx?\)\' . doc-view-mode-maybe) (configure\.\(ac\|in\)\' . autoconf-mode) (\.s\(v\|iv\|ieve\)\' . sieve-mode) (BROWSE\' . ebrowse-tree-mode) (\.ebrowse\' . ebrowse-tree-mode) (#\*mail\* . mail-mode) (\.g\' . antlr-mode) (\.mod\' . m2-mode) (\.ses\' . ses-mode) (\.docbook\' . sgml-mode) (\.com\' . dcl-mode) (/config\.\(?:bat\|log\)\' . fundamental-mode) (/\.\(authinfo\|netrc\)\' . authinfo-mode) (\.\(?:[iI][nN][iI]\|[lL][sS][tT]\|[rR][eE][gG]\|[sS][yY][sS]\)\' . conf-mode) (\.la\' . conf-unix-mode) (\.ppd\' . conf-ppd-mode) (java.+\.conf\' . conf-javaprop-mode) (\.properties\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-javaprop-mode) (\.toml\' . conf-toml-mode) (\.desktop\' . conf-desktop-mode) (/\.redshift\.conf\' . conf-windows-mode) (\`/etc/\(?:DIR_COLORS\|ethers\|.?fstab\|.*hosts\|lesskey\|login\.?de\(?:fs\|vperm\)\|magic\|mtab\|pam\.d/.*\|permissions\(?:\.d/.+\)?\|protocols\|rpc\|services\)\' . conf-space-mode) (\`/etc/\(?:acpid?/.+\|aliases\(?:\.d/.+\)?\|default/.+\|group-?\|hosts\..+\|inittab\|ksysguarddrc\|opera6rc\|passwd-?\|shadow-?\|sysconfig/.+\)\' . conf-mode) ([cC]hange[lL]og[-.][-0-9a-z]+\' . change-log-mode) (/\.?\(?:gitconfig\|gnokiirc\|hgrc\|kde.*rc\|mime\.types\|wgetrc\)\' . conf-mode) (/\.\(?:asound\|enigma\|fetchmail\|gltron\|gtk\|hxplayer\|mairix\|mbsync\|msmtp\|net\|neverball\|nvidia-settings-\|offlineimap\|qt/.+\|realplayer\|reportbug\|rtorrent\.\|screen\|scummvm\|sversion\|sylpheed/.+\|xmp\)rc\' . conf-mode) (/\.\(?:gdbtkinit\|grip\|mpdconf\|notmuch-config\|orbital/.+txt\|rhosts\|tuxracer/options\)\' . conf-mode) (/\.?X\(?:default\|resource\|re\)s\> . conf-xdefaults-mode) (/X11.+app-defaults/\|\.ad\' . conf-xdefaults-mode) (/X11.+locale/.+/Compose\' . conf-colon-mode) (/X11.+locale/compose\.dir\' . conf-javaprop-mode) (\.~?[0-9]+\.[0-9][-.0-9]*~?\' nil t) (\.\(?:orig\|in\|[bB][aA][kK]\)\' nil t) ([/.]c\(?:on\)?f\(?:i?g\)?\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-mode-maybe) (\.[1-9]\' . nroff-mode) (\.art\' . image-mode) (\.avs\' . image-mode) (\.bmp\' . image-mode) (\.cmyk\' . image-mode) (\.cmyka\' . image-mode) (\.crw\' . image-mode) (\.dcr\' . image-mode) (\.dcx\' . image-mode) (\.dng\' . image-mode) (\.dpx\' . image-mode) (\.fax\' . image-mode) (\.hrz\' . image-mode) (\.icb\' . image-mode) (\.icc\' . image-mode) (\.icm\' . image-mode) (\.ico\' . image-mode) (\.icon\' . image-mode) (\.jbg\' . image-mode) (\.jbig\' . image-mode) (\.jng\' . image-mode) (\.jnx\' . image-mode) (\.miff\' . image-mode) (\.mng\' . image-mode) (\.mvg\' . image-mode) (\.otb\' . image-mode) (\.p7\' . image-mode) (\.pcx\' . image-mode) (\.pdb\' . image-mode) (\.pfa\' . image-mode) (\.pfb\' . image-mode) (\.picon\' . image-mode) (\.pict\' . image-mode) (\.rgb\' . image-mode) (\.rgba\' . image-mode) (\.tga\' . image-mode) (\.wbmp\' . image-mode) (\.webp\' . image-mode) (\.wmf\' . image-mode) (\.wpg\' . image-mode) (\.xcf\' . image-mode) (\.xmp\' . image-mode) (\.xwd\' . image-mode) (\.yuv\' . image-mode) (\.tgz\' . tar-mode) (\.tbz2?\' . tar-mode) (\.txz\' . tar-mode) (\.tzst\' . tar-mode))

*** Ruby
    #+begin_src emacs-lisp
      (use-package ruby-mode
	:mode "\\.\\(?:a?rb\\|aslsx\\)\\'"
	:mode "/\\(?:Brew\\|Fast\\)file\\'"
	:config
	(setq ruby-insert-encoding-magic-comment nil) )
    #+end_src

    #+RESULTS:
    : ((/\(?:Brew\|Fast\)file\' . ruby-mode) (\.\(?:a?rb\|aslsx\)\' . ruby-mode) (\.\(?:md\|markdown\|mkd\|mdown\|mkdn\|mdwn\)\' . markdown-mode) (/README\(?:\.md\)?\' . gfm-mode) (Procfile\' . yaml-mode) (\.\(e?ya?\|ra\)ml\' . yaml-mode) (\.odc\' . archive-mode) (\.odf\' . archive-mode) (\.odi\' . archive-mode) (\.otp\' . archive-mode) (\.odp\' . archive-mode) (\.otg\' . archive-mode) (\.odg\' . archive-mode) (\.ots\' . archive-mode) (\.ods\' . archive-mode) (\.odm\' . archive-mode) (\.ott\' . archive-mode) (\.odt\' . archive-mode) (\.gpg\(~\|\.~[0-9]+~\)?\' nil epa-file) (/git-rebase-todo\' . git-rebase-mode) (\.elc\' . elisp-byte-code-mode) (\.zst\' nil jka-compr) (\.dz\' nil jka-compr) (\.xz\' nil jka-compr) (\.lzma\' nil jka-compr) (\.lz\' nil jka-compr) (\.g?z\' nil jka-compr) (\.bz2\' nil jka-compr) (\.Z\' nil jka-compr) (\.vr[hi]?\' . vera-mode) (\(?:\.\(?:rbw?\|ru\|rake\|thor\|jbuilder\|rabl\|gemspec\|podspec\)\|/\(?:Gem\|Rake\|Cap\|Thor\|Puppet\|Berks\|Vagrant\|Guard\|Pod\)file\)\' . ruby-mode) (\.re?st\' . rst-mode) (\.py[iw]?\' . python-mode) (\.m\' . octave-maybe-mode) (\.less\' . less-css-mode) (\.scss\' . scss-mode) (\.awk\' . awk-mode) (\.\(u?lpc\|pike\|pmod\(\.in\)?\)\' . pike-mode) (\.idl\' . idl-mode) (\.java\' . java-mode) (\.m\' . objc-mode) (\.ii\' . c++-mode) (\.i\' . c-mode) (\.lex\' . c-mode) (\.y\(acc\)?\' . c-mode) (\.h\' . c-or-c++-mode) (\.c\' . c-mode) (\.\(CC?\|HH?\)\' . c++-mode) (\.[ch]\(pp\|xx\|\+\+\)\' . c++-mode) (\.\(cc\|hh\)\' . c++-mode) (\.\(bat\|cmd\)\' . bat-mode) (\.[sx]?html?\(\.[a-zA-Z_]+\)?\' . mhtml-mode) (\.svgz?\' . image-mode) (\.svgz?\' . xml-mode) (\.x[bp]m\' . image-mode) (\.x[bp]m\' . c-mode) (\.p[bpgn]m\' . image-mode) (\.tiff?\' . image-mode) (\.gif\' . image-mode) (\.png\' . image-mode) (\.jpe?g\' . image-mode) (\.te?xt\' . text-mode) (\.[tT]e[xX]\' . tex-mode) (\.ins\' . tex-mode) (\.ltx\' . latex-mode) (\.dtx\' . doctex-mode) (\.org\' . org-mode) (\.el\' . emacs-lisp-mode) (Project\.ede\' . emacs-lisp-mode) (\.\(scm\|stk\|ss\|sch\)\' . scheme-mode) (\.l\' . lisp-mode) (\.li?sp\' . lisp-mode) (\.[fF]\' . fortran-mode) (\.for\' . fortran-mode) (\.p\' . pascal-mode) (\.pas\' . pascal-mode) (\.\(dpr\|DPR\)\' . delphi-mode) (\.ad[abs]\' . ada-mode) (\.ad[bs]\.dg\' . ada-mode) (\.\([pP]\([Llm]\|erl\|od\)\|al\)\' . perl-mode) (Imakefile\' . makefile-imake-mode) (Makeppfile\(?:\.mk\)?\' . makefile-makepp-mode) (\.makepp\' . makefile-makepp-mode) (\.mk\' . makefile-bsdmake-mode) (\.make\' . makefile-bsdmake-mode) (GNUmakefile\' . makefile-gmake-mode) ([Mm]akefile\' . makefile-bsdmake-mode) (\.am\' . makefile-automake-mode) (\.texinfo\' . texinfo-mode) (\.te?xi\' . texinfo-mode) (\.[sS]\' . asm-mode) (\.asm\' . asm-mode) (\.css\' . css-mode) (\.mixal\' . mixal-mode) (\.gcov\' . compilation-mode) (/\.[a-z0-9-]*gdbinit . gdb-script-mode) (-gdb\.gdb . gdb-script-mode) ([cC]hange\.?[lL]og?\' . change-log-mode) ([cC]hange[lL]og[-.][0-9]+\' . change-log-mode) (\$CHANGE_LOG\$\.TXT . change-log-mode) (\.scm\.[0-9]*\' . scheme-mode) (\.[ckz]?sh\'\|\.shar\'\|/\.z?profile\' . sh-mode) (\.bash\' . sh-mode) (\(/\|\`\)\.\(bash_\(profile\|history\|log\(in\|out\)\)\|z?log\(in\|out\)\)\' . sh-mode) (\(/\|\`\)\.\(shrc\|zshrc\|m?kshrc\|bashrc\|t?cshrc\|esrc\)\' . sh-mode) (\(/\|\`\)\.\([kz]shenv\|xinitrc\|startxrc\|xsession\)\' . sh-mode) (\.m?spec\' . sh-mode) (\.m[mes]\' . nroff-mode) (\.man\' . nroff-mode) (\.sty\' . latex-mode) (\.cl[so]\' . latex-mode) (\.bbl\' . latex-mode) (\.bib\' . bibtex-mode) (\.bst\' . bibtex-style-mode) (\.sql\' . sql-mode) (\(acinclude\|aclocal\|acsite\)\.m4\' . autoconf-mode) (\.m[4c]\' . m4-mode) (\.mf\' . metafont-mode) (\.mp\' . metapost-mode) (\.vhdl?\' . vhdl-mode) (\.article\' . text-mode) (\.letter\' . text-mode) (\.i?tcl\' . tcl-mode) (\.exp\' . tcl-mode) (\.itk\' . tcl-mode) (\.icn\' . icon-mode) (\.sim\' . simula-mode) (\.mss\' . scribe-mode) (\.f9[05]\' . f90-mode) (\.f0[38]\' . f90-mode) (\.indent\.pro\' . fundamental-mode) (\.\(pro\|PRO\)\' . idlwave-mode) (\.srt\' . srecode-template-mode) (\.prolog\' . prolog-mode) (\.tar\' . tar-mode) (\.\(arc\|zip\|lzh\|lha\|zoo\|[jew]ar\|xpi\|rar\|cbr\|7z\|ARC\|ZIP\|LZH\|LHA\|ZOO\|[JEW]AR\|XPI\|RAR\|CBR\|7Z\)\' . archive-mode) (\.oxt\' . archive-mode) (\.\(deb\|[oi]pk\)\' . archive-mode) (\`/tmp/Re . text-mode) (/Message[0-9]*\' . text-mode) (\`/tmp/fol/ . text-mode) (\.oak\' . scheme-mode) (\.sgml?\' . sgml-mode) (\.x[ms]l\' . xml-mode) (\.dbk\' . xml-mode) (\.dtd\' . sgml-mode) (\.ds\(ss\)?l\' . dsssl-mode) (\.js[mx]?\' . javascript-mode) (\.har\' . javascript-mode) (\.json\' . javascript-mode) (\.[ds]?va?h?\' . verilog-mode) (\.by\' . bovine-grammar-mode) (\.wy\' . wisent-grammar-mode) ([:/\]\..*\(emacs\|gnus\|viper\)\' . emacs-lisp-mode) (\`\..*emacs\' . emacs-lisp-mode) ([:/]_emacs\' . emacs-lisp-mode) (/crontab\.X*[0-9]+\' . shell-script-mode) (\.ml\' . lisp-mode) (\.ld[si]?\' . ld-script-mode) (ld\.?script\' . ld-script-mode) (\.xs\' . c-mode) (\.x[abdsru]?[cnw]?\' . ld-script-mode) (\.zone\' . dns-mode) (\.soa\' . dns-mode) (\.asd\' . lisp-mode) (\.\(asn\|mib\|smi\)\' . snmp-mode) (\.\(as\|mi\|sm\)2\' . snmpv2-mode) (\.\(diffs?\|patch\|rej\)\' . diff-mode) (\.\(dif\|pat\)\' . diff-mode) (\.[eE]?[pP][sS]\' . ps-mode) (\.\(?:PDF\|DVI\|OD[FGPST]\|DOCX\|XLSX?\|PPTX?\|pdf\|djvu\|dvi\|od[fgpst]\|docx\|xlsx?\|pptx?\)\' . doc-view-mode-maybe) (configure\.\(ac\|in\)\' . autoconf-mode) (\.s\(v\|iv\|ieve\)\' . sieve-mode) (BROWSE\' . ebrowse-tree-mode) (\.ebrowse\' . ebrowse-tree-mode) (#\*mail\* . mail-mode) (\.g\' . antlr-mode) (\.mod\' . m2-mode) (\.ses\' . ses-mode) (\.docbook\' . sgml-mode) (\.com\' . dcl-mode) (/config\.\(?:bat\|log\)\' . fundamental-mode) (/\.\(authinfo\|netrc\)\' . authinfo-mode) (\.\(?:[iI][nN][iI]\|[lL][sS][tT]\|[rR][eE][gG]\|[sS][yY][sS]\)\' . conf-mode) (\.la\' . conf-unix-mode) (\.ppd\' . conf-ppd-mode) (java.+\.conf\' . conf-javaprop-mode) (\.properties\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-javaprop-mode) (\.toml\' . conf-toml-mode) (\.desktop\' . conf-desktop-mode) (/\.redshift\.conf\' . conf-windows-mode) (\`/etc/\(?:DIR_COLORS\|ethers\|.?fstab\|.*hosts\|lesskey\|login\.?de\(?:fs\|vperm\)\|magic\|mtab\|pam\.d/.*\|permissions\(?:\.d/.+\)?\|protocols\|rpc\|services\)\' . conf-space-mode) (\`/etc/\(?:acpid?/.+\|aliases\(?:\.d/.+\)?\|default/.+\|group-?\|hosts\..+\|inittab\|ksysguarddrc\|opera6rc\|passwd-?\|shadow-?\|sysconfig/.+\)\' . conf-mode) ([cC]hange[lL]og[-.][-0-9a-z]+\' . change-log-mode) (/\.?\(?:gitconfig\|gnokiirc\|hgrc\|kde.*rc\|mime\.types\|wgetrc\)\' . conf-mode) (/\.\(?:asound\|enigma\|fetchmail\|gltron\|gtk\|hxplayer\|mairix\|mbsync\|msmtp\|net\|neverball\|nvidia-settings-\|offlineimap\|qt/.+\|realplayer\|reportbug\|rtorrent\.\|screen\|scummvm\|sversion\|sylpheed/.+\|xmp\)rc\' . conf-mode) (/\.\(?:gdbtkinit\|grip\|mpdconf\|notmuch-config\|orbital/.+txt\|rhosts\|tuxracer/options\)\' . conf-mode) (/\.?X\(?:default\|resource\|re\)s\> . conf-xdefaults-mode) (/X11.+app-defaults/\|\.ad\' . conf-xdefaults-mode) (/X11.+locale/.+/Compose\' . conf-colon-mode) (/X11.+locale/compose\.dir\' . conf-javaprop-mode) (\.~?[0-9]+\.[0-9][-.0-9]*~?\' nil t) (\.\(?:orig\|in\|[bB][aA][kK]\)\' nil t) ([/.]c\(?:on\)?f\(?:i?g\)?\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-mode-maybe) (\.[1-9]\' . nroff-mode) (\.art\' . image-mode) (\.avs\' . image-mode) (\.bmp\' . image-mode) (\.cmyk\' . image-mode) (\.cmyka\' . image-mode) (\.crw\' . image-mode) (\.dcr\' . image-mode) (\.dcx\' . image-mode) (\.dng\' . image-mode) (\.dpx\' . image-mode) (\.fax\' . image-mode) (\.hrz\' . image-mode) (\.icb\' . image-mode) (\.icc\' . image-mode) (\.icm\' . image-mode) (\.ico\' . image-mode) (\.icon\' . image-mode) (\.jbg\' . image-mode) (\.jbig\' . image-mode) (\.jng\' . image-mode) (\.jnx\' . image-mode) (\.miff\' . image-mode) (\.mng\' . image-mode) (\.mvg\' . image-mode) (\.otb\' . image-mode) (\.p7\' . image-mode) (\.pcx\' . image-mode) (\.pdb\' . image-mode) (\.pfa\' . image-mode) (\.pfb\' . image-mode) (\.picon\' . image-mode) (\.pict\' . image-mode) (\.rgb\' . image-mode) (\.rgba\' . image-mode) (\.tga\' . image-mode) (\.wbmp\' . image-mode) (\.webp\' . image-mode) (\.wmf\' . image-mode) (\.wpg\' . image-mode) (\.xcf\' . image-mode) (\.xmp\' . image-mode) (\.xwd\' . image-mode) (\.yuv\' . image-mode) (\.tgz\' . tar-mode) (\.tbz2?\' . tar-mode) (\.txz\' . tar-mode) (\.tzst\' . tar-mode))

*** Go
    #+begin_src emacs-lisp
    (use-package go-mode)
    #+end_src

    #+RESULTS:

*** C/C++
*** Javascript
    #+begin_src emacs-lisp
    (use-package js2-mode)
    #+end_src

    #+RESULTS:
*** Typescript
    #+begin_src emacs-lisp
    (use-package typescript-mode)
    #+end_src

    #+RESULTS:

*** HTML
*** YAML
    #+begin_src emacs-lisp
      (defun jh/set-yaml-tab-width()
	(setq tab-width yaml-indent-offset)
	)
      (use-package yaml-mode
	:mode "Procfile\\'"
	:config
	(add-hook 'yaml-mode-hook 'jh/set-yaml-tab-width))

    #+end_src

    #+RESULTS:
    : ((Procfile\' . yaml-mode) (/\(?:Brew\|Fast\)file\' . ruby-mode) (\.\(?:a?rb\|aslsx\)\' . ruby-mode) (/README\(?:\.md\)?\' . gfm-mode) (\.gpg\(~\|\.~[0-9]+~\)?\' nil epa-file) (go\.mod\' . go-dot-mod-mode) (\.go\' . go-mode) (\(?:\(?:\.\(?:b\(?:\(?:abel\|ower\)rc\)\|json\(?:ld\)?\)\|composer\.lock\)\'\) . json-mode) (/git-rebase-todo\' . git-rebase-mode) (\.\(?:md\|markdown\|mkd\|mdown\|mkdn\|mdwn\)\' . markdown-mode) (\.\(e?ya?\|ra\)ml\' . yaml-mode) (\.elc\' . elisp-byte-code-mode) (\.zst\' nil jka-compr) (\.dz\' nil jka-compr) (\.xz\' nil jka-compr) (\.lzma\' nil jka-compr) (\.lz\' nil jka-compr) (\.g?z\' nil jka-compr) (\.bz2\' nil jka-compr) (\.Z\' nil jka-compr) (\.vr[hi]?\' . vera-mode) (\(?:\.\(?:rbw?\|ru\|rake\|thor\|jbuilder\|rabl\|gemspec\|podspec\)\|/\(?:Gem\|Rake\|Cap\|Thor\|Puppet\|Berks\|Vagrant\|Guard\|Pod\)file\)\' . ruby-mode) (\.re?st\' . rst-mode) (\.py[iw]?\' . python-mode) (\.m\' . octave-maybe-mode) (\.less\' . less-css-mode) (\.scss\' . scss-mode) (\.awk\' . awk-mode) (\.\(u?lpc\|pike\|pmod\(\.in\)?\)\' . pike-mode) (\.idl\' . idl-mode) (\.java\' . java-mode) (\.m\' . objc-mode) (\.ii\' . c++-mode) (\.i\' . c-mode) (\.lex\' . c-mode) (\.y\(acc\)?\' . c-mode) (\.h\' . c-or-c++-mode) (\.c\' . c-mode) (\.\(CC?\|HH?\)\' . c++-mode) (\.[ch]\(pp\|xx\|\+\+\)\' . c++-mode) (\.\(cc\|hh\)\' . c++-mode) (\.\(bat\|cmd\)\' . bat-mode) (\.[sx]?html?\(\.[a-zA-Z_]+\)?\' . mhtml-mode) (\.svgz?\' . image-mode) (\.svgz?\' . xml-mode) (\.x[bp]m\' . image-mode) (\.x[bp]m\' . c-mode) (\.p[bpgn]m\' . image-mode) (\.tiff?\' . image-mode) (\.gif\' . image-mode) (\.png\' . image-mode) (\.jpe?g\' . image-mode) (\.te?xt\' . text-mode) (\.[tT]e[xX]\' . tex-mode) (\.ins\' . tex-mode) (\.ltx\' . latex-mode) (\.dtx\' . doctex-mode) (\.org\' . org-mode) (\.el\' . emacs-lisp-mode) (Project\.ede\' . emacs-lisp-mode) (\.\(scm\|stk\|ss\|sch\)\' . scheme-mode) (\.l\' . lisp-mode) (\.li?sp\' . lisp-mode) (\.[fF]\' . fortran-mode) (\.for\' . fortran-mode) (\.p\' . pascal-mode) (\.pas\' . pascal-mode) (\.\(dpr\|DPR\)\' . delphi-mode) (\.ad[abs]\' . ada-mode) (\.ad[bs]\.dg\' . ada-mode) (\.\([pP]\([Llm]\|erl\|od\)\|al\)\' . perl-mode) (Imakefile\' . makefile-imake-mode) (Makeppfile\(?:\.mk\)?\' . makefile-makepp-mode) (\.makepp\' . makefile-makepp-mode) (\.mk\' . makefile-bsdmake-mode) (\.make\' . makefile-bsdmake-mode) (GNUmakefile\' . makefile-gmake-mode) ([Mm]akefile\' . makefile-bsdmake-mode) (\.am\' . makefile-automake-mode) (\.texinfo\' . texinfo-mode) (\.te?xi\' . texinfo-mode) (\.[sS]\' . asm-mode) (\.asm\' . asm-mode) (\.css\' . css-mode) (\.mixal\' . mixal-mode) (\.gcov\' . compilation-mode) (/\.[a-z0-9-]*gdbinit . gdb-script-mode) (-gdb\.gdb . gdb-script-mode) ([cC]hange\.?[lL]og?\' . change-log-mode) ([cC]hange[lL]og[-.][0-9]+\' . change-log-mode) (\$CHANGE_LOG\$\.TXT . change-log-mode) (\.scm\.[0-9]*\' . scheme-mode) (\.[ckz]?sh\'\|\.shar\'\|/\.z?profile\' . sh-mode) (\.bash\' . sh-mode) (\(/\|\`\)\.\(bash_\(profile\|history\|log\(in\|out\)\)\|z?log\(in\|out\)\)\' . sh-mode) (\(/\|\`\)\.\(shrc\|zshrc\|m?kshrc\|bashrc\|t?cshrc\|esrc\)\' . sh-mode) (\(/\|\`\)\.\([kz]shenv\|xinitrc\|startxrc\|xsession\)\' . sh-mode) (\.m?spec\' . sh-mode) (\.m[mes]\' . nroff-mode) (\.man\' . nroff-mode) (\.sty\' . latex-mode) (\.cl[so]\' . latex-mode) (\.bbl\' . latex-mode) (\.bib\' . bibtex-mode) (\.bst\' . bibtex-style-mode) (\.sql\' . sql-mode) (\(acinclude\|aclocal\|acsite\)\.m4\' . autoconf-mode) (\.m[4c]\' . m4-mode) (\.mf\' . metafont-mode) (\.mp\' . metapost-mode) (\.vhdl?\' . vhdl-mode) (\.article\' . text-mode) (\.letter\' . text-mode) (\.i?tcl\' . tcl-mode) (\.exp\' . tcl-mode) (\.itk\' . tcl-mode) (\.icn\' . icon-mode) (\.sim\' . simula-mode) (\.mss\' . scribe-mode) (\.f9[05]\' . f90-mode) (\.f0[38]\' . f90-mode) (\.indent\.pro\' . fundamental-mode) (\.\(pro\|PRO\)\' . idlwave-mode) (\.srt\' . srecode-template-mode) (\.prolog\' . prolog-mode) (\.tar\' . tar-mode) (\.\(arc\|zip\|lzh\|lha\|zoo\|[jew]ar\|xpi\|rar\|cbr\|7z\|ARC\|ZIP\|LZH\|LHA\|ZOO\|[JEW]AR\|XPI\|RAR\|CBR\|7Z\)\' . archive-mode) (\.oxt\' . archive-mode) (\.\(deb\|[oi]pk\)\' . archive-mode) (\`/tmp/Re . text-mode) (/Message[0-9]*\' . text-mode) (\`/tmp/fol/ . text-mode) (\.oak\' . scheme-mode) (\.sgml?\' . sgml-mode) (\.x[ms]l\' . xml-mode) (\.dbk\' . xml-mode) (\.dtd\' . sgml-mode) (\.ds\(ss\)?l\' . dsssl-mode) (\.js[mx]?\' . javascript-mode) (\.har\' . javascript-mode) (\.json\' . javascript-mode) (\.[ds]?va?h?\' . verilog-mode) (\.by\' . bovine-grammar-mode) (\.wy\' . wisent-grammar-mode) ([:/\]\..*\(emacs\|gnus\|viper\)\' . emacs-lisp-mode) (\`\..*emacs\' . emacs-lisp-mode) ([:/]_emacs\' . emacs-lisp-mode) (/crontab\.X*[0-9]+\' . shell-script-mode) (\.ml\' . lisp-mode) (\.ld[si]?\' . ld-script-mode) (ld\.?script\' . ld-script-mode) (\.xs\' . c-mode) (\.x[abdsru]?[cnw]?\' . ld-script-mode) (\.zone\' . dns-mode) (\.soa\' . dns-mode) (\.asd\' . lisp-mode) (\.\(asn\|mib\|smi\)\' . snmp-mode) (\.\(as\|mi\|sm\)2\' . snmpv2-mode) (\.\(diffs?\|patch\|rej\)\' . diff-mode) (\.\(dif\|pat\)\' . diff-mode) (\.[eE]?[pP][sS]\' . ps-mode) (\.\(?:PDF\|DVI\|OD[FGPST]\|DOCX\|XLSX?\|PPTX?\|pdf\|djvu\|dvi\|od[fgpst]\|docx\|xlsx?\|pptx?\)\' . doc-view-mode-maybe) (configure\.\(ac\|in\)\' . autoconf-mode) (\.s\(v\|iv\|ieve\)\' . sieve-mode) (BROWSE\' . ebrowse-tree-mode) (\.ebrowse\' . ebrowse-tree-mode) (#\*mail\* . mail-mode) (\.g\' . antlr-mode) (\.mod\' . m2-mode) (\.ses\' . ses-mode) (\.docbook\' . sgml-mode) (\.com\' . dcl-mode) (/config\.\(?:bat\|log\)\' . fundamental-mode) (/\.\(authinfo\|netrc\)\' . authinfo-mode) (\.\(?:[iI][nN][iI]\|[lL][sS][tT]\|[rR][eE][gG]\|[sS][yY][sS]\)\' . conf-mode) (\.la\' . conf-unix-mode) (\.ppd\' . conf-ppd-mode) (java.+\.conf\' . conf-javaprop-mode) (\.properties\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-javaprop-mode) (\.toml\' . conf-toml-mode) (\.desktop\' . conf-desktop-mode) (/\.redshift\.conf\' . conf-windows-mode) (\`/etc/\(?:DIR_COLORS\|ethers\|.?fstab\|.*hosts\|lesskey\|login\.?de\(?:fs\|vperm\)\|magic\|mtab\|pam\.d/.*\|permissions\(?:\.d/.+\)?\|protocols\|rpc\|services\)\' . conf-space-mode) (\`/etc/\(?:acpid?/.+\|aliases\(?:\.d/.+\)?\|default/.+\|group-?\|hosts\..+\|inittab\|ksysguarddrc\|opera6rc\|passwd-?\|shadow-?\|sysconfig/.+\)\' . conf-mode) ([cC]hange[lL]og[-.][-0-9a-z]+\' . change-log-mode) (/\.?\(?:gitconfig\|gnokiirc\|hgrc\|kde.*rc\|mime\.types\|wgetrc\)\' . conf-mode) (/\.\(?:asound\|enigma\|fetchmail\|gltron\|gtk\|hxplayer\|mairix\|mbsync\|msmtp\|net\|neverball\|nvidia-settings-\|offlineimap\|qt/.+\|realplayer\|reportbug\|rtorrent\.\|screen\|scummvm\|sversion\|sylpheed/.+\|xmp\)rc\' . conf-mode) (/\.\(?:gdbtkinit\|grip\|mpdconf\|notmuch-config\|orbital/.+txt\|rhosts\|tuxracer/options\)\' . conf-mode) (/\.?X\(?:default\|resource\|re\)s\> . conf-xdefaults-mode) (/X11.+app-defaults/\|\.ad\' . conf-xdefaults-mode) (/X11.+locale/.+/Compose\' . conf-colon-mode) (/X11.+locale/compose\.dir\' . conf-javaprop-mode) (\.~?[0-9]+\.[0-9][-.0-9]*~?\' nil t) (\.\(?:orig\|in\|[bB][aA][kK]\)\' nil t) ([/.]c\(?:on\)?f\(?:i?g\)?\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-mode-maybe) (\.[1-9]\' . nroff-mode) (\.art\' . image-mode) (\.avs\' . image-mode) (\.bmp\' . image-mode) (\.cmyk\' . image-mode) (\.cmyka\' . image-mode) (\.crw\' . image-mode) (\.dcr\' . image-mode) (\.dcx\' . image-mode) (\.dng\' . image-mode) (\.dpx\' . image-mode) (\.fax\' . image-mode) (\.hrz\' . image-mode) (\.icb\' . image-mode) (\.icc\' . image-mode) (\.icm\' . image-mode) (\.ico\' . image-mode) (\.icon\' . image-mode) (\.jbg\' . image-mode) (\.jbig\' . image-mode) (\.jng\' . image-mode) (\.jnx\' . image-mode) (\.miff\' . image-mode) (\.mng\' . image-mode) (\.mvg\' . image-mode) (\.otb\' . image-mode) (\.p7\' . image-mode) (\.pcx\' . image-mode) (\.pdb\' . image-mode) (\.pfa\' . image-mode) (\.pfb\' . image-mode) (\.picon\' . image-mode) (\.pict\' . image-mode) (\.rgb\' . image-mode) (\.rgba\' . image-mode) (\.tga\' . image-mode) (\.wbmp\' . image-mode) (\.webp\' . image-mode) (\.wmf\' . image-mode) (\.wpg\' . image-mode) (\.xcf\' . image-mode) (\.xmp\' . image-mode) (\.xwd\' . image-mode) (\.yuv\' . image-mode) (\.tgz\' . tar-mode) (\.tbz2?\' . tar-mode) (\.txz\' . tar-mode) (\.tzst\' . tar-mode))
*** Solidity
    #+begin_src emacs-lisp
      (use-package solidity-mode)
      (use-package solidity-flycheck)
      (setq solidity-comment-style 'slash)
    #+end_src

    #+RESULTS:
    : slash
*** Terraform
    #+begin_src emacs-lisp
    (use-package terraform-mode)
    #+end_src

    #+RESULTS:
*** Lua
    #+begin_src emacs-lisp
    (use-package lua-mode)
    #+end_src

    #+RESULTS:

** Productivity
*** Smartparens
    #+begin_src emacs-lisp
      (use-package smartparens
	:init (require 'smartparens-config)
	:config
	(set-face-attribute 'show-paren-match nil :background "#ffffff" :bold t)
	:hook (text-mode . smartparens-mode)
	)
      (show-smartparens-global-mode 1)
      (smartparens-global-mode 1)
      (set-face-attribute 'show-paren-match nil :background "#ffffff" :bold t)
    #+end_src

  #+RESULTS:
*** Rainbow Delimiters
    #+begin_src emacs-lisp
    (use-package rainbow-delimiters
	:hook (prog-mode . rainbow-delimiters-mode)
    )
    #+end_src

    #+RESULTS:
    | rainbow-delimiters-mode |
*** Commenting lines
    #+begin_src emacs-lisp
    (general-evil-setup t)
    (use-package evil-nerd-commenter)
    (mmap :prefix "g" "c" 'evilnc-comment-operator)
    #+end_src

    #+RESULTS:
*** Editorconfig
    #+begin_src emacs-lisp
      (use-package editorconfig
	:config
	(editorconfig-mode 1)
	)
    #+end_src

    #+RESULTS:
    : t
*** Folding
    #+begin_src emacs-lisp
      (use-package origami
	:config 'global-origami-mode)
    #+end_src

    #+RESULTS:
    : t

** Project management
*** Projectile
    #+begin_src emacs-lisp
      (defun jh/close-project()
	(interactive)
	(projectile-kill-buffers)
	(persp-kill persp-last-persp-name)
	)
      (use-package projectile
	:diminish projectile-mode
	:config (projectile-mode)
	:demand t
	)
      (use-package counsel-projectile
	:after projectile
	)
      (jh/leader-key-def
	"p" '(:ignore t :which-key "projects")
	"pp" '(counsel-projectile-switch-project :which-key "Switch project")
	"pf" '(counsel-projectile-find-file :which-key "Open file in project")
	"pc" '(projectile-compile-project :which-key "Compile project")
	"pb" '(counsel-projectile-switch-to-buffer :which-key "Switch buffer")
	"px" '(projectile-invalidate-cache :which-key "Invalidate cache")
	"pk" '(jh/close-project :which-key "Close Project")
	)
    #+end_src

    #+RESULTS:
*** Perspective
#+begin_src emacs-lisp
  (use-package persp-mode
    :init
    (persp-mode +1)
    :config
    (setq persp-nil-hidden t
	  persp-auto-resume-time -1 ;; don't autoload on startup
	  persp-kill-foreign-buffer-behaviour 'kill
	  persp-remove-buffers-from-nil-persp-behaviour nil
	  )
    )
  (use-package persp-mode-projectile-bridge
    :init
    (persp-mode-projectile-bridge-mode +1)
    )
  (nmap :prefix "g" "t" 'persp-next)
  (nmap :prefix "g" "T" 'persp-prev)
  #+end_src
#+RESULTS:

** Git
*** Magit
   #+begin_src emacs-lisp
     (use-package magit)
     ;; (use-package evil-magit :after magit)
     (jh/leader-key-def
     "g" '(:ignore t :which-key "git")
     "gg" 'magit-status
     "gs" 'magit-stage
     )
   #+end_src

   #+RESULTS:
*** Magit-todos
    #+begin_src emacs-lisp
    (use-package magit-todos :defer t)
    #+end_src

    #+RESULTS:
*** Git gutter
    #+begin_src emacs-lisp
    (use-package git-gutter
    :diminish
    :hook (
	(text-mode . git-gutter-mode)
	(prog-mode . git-gutter-mode))
    :config
    (setq git-gutter:update-interval 2)
    )
    #+end_src

    #+RESULTS:
    | git-gutter-mode | rainbow-delimiters-mode |

* Mail
  Setup mu4e.
** Basics
   #+BEGIN_SRC emacs-lisp
     (setq user-mail-address "jelle.helsen@hcode.be")
     (add-to-list 'load-path "/usr/share/emacs/site-lisp/mu4e")
     (require 'mu4e)
     (require 'org-mu4e)
     (setq
      mu4e-mu-binary "/usr/bin/mu"
      mu4e-headers-fields
      '((:account . 12)
	(:human-date . 12)
	(:flags . 4)
	(:from . 25)
	(:subject))
      mu4e-hide-index-messages nil
      mu4e-view-show-images t
      mu4e-view-image-max-width 800
      message-kill-buffer-on-exit t
      mail-user-agent 'mu4e-user-agent
      mu4e-change-filenames-when-moving t
      )
     ;; Html mails might be better rendered in a browser
     (add-to-list 'mu4e-view-actions '("View in browser" . mu4e-action-view-in-browser))

     (use-package mu4e-marker-icons
       :init (mu4e-marker-icons-mode 1))
     ;; Add a column to display what email account the email belongs to.
     (add-to-list 'mu4e-header-info-custom
		  '(:account
		    :name "Account"
		    :shortname "Account"
		    :help "Which account this email belongs to"
		    :function
		    (lambda (msg)
		      (let ((maildir (mu4e-message-field msg :maildir)))
			(format "%s" (substring maildir 1 (string-match-p "/" maildir 1)))))))

  #+END_SRC

#+RESULTS:
| :account  | :name | Account              | :shortname | Account | :help | Which account this email belongs to   | :function | (lambda (msg) (let ((maildir (mu4e-message-field msg :maildir))) (format %s (substring maildir 1 (string-match-p / maildir 1))))) |
| :recipnum | :name | Number of recipients | :shortname | Recip#  | :help | Number of recipients for this message | :function | (lambda (msg) (format %d (+ (length (mu4e-message-field msg :to)) (length (mu4e-message-field msg :cc)))))                        |
** LastPass
   #+begin_src emacs-lisp
     (use-package lastpass
       :config
       ;; Set lastpass user
       (setq lastpass-user "jelle.helsen@hcode.be")
       (setq lastpass-trust-login t)
       ;; Enable lastpass custom auth-source
       ;; (lastpass-auth-source-enable)
       )
     (defun lastpass-mu4e-update-mail-and-index (update-function &rest r)
       "Check if user is logged in and run UPDATE-FUNCTION with arguments R."
       (unless (lastpass-logged-in-p)
	 (lastpass-login)
	 (error "LastPass: Not logged in, log in and retry"))
       (apply update-function r))

     (advice-add 'mu4e-update-mail-and-index :around #'lastpass-mu4e-update-mail-and-index)

   #+end_src

   #+RESULTS:

** Setup folders
#+BEGIN_SRC emacs-lisp
  (setq mu4e-maildir "~/email"
	mu4e-trash-folder "/Trash"
	mu4e-refile-folder "/Archive"
	mu4e-get-mail-command "mbsync -a"
	mu4e-update-interval nil
	mu4e-compose-signature-auto-include nil
	mu4e-view-show-images t
	mu4e-headers-skip-duplicates t
	mu4e-confirm-quit nil
	mu4e-view-show-addresses t)
#+END_SRC

#+RESULTS:
: t
** Contexts
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'mu4e (setq mu4e-contexts
				    `(
				      ,(make-mu4e-context
					:name "hcode"
					:enter-func (lambda () (mu4e-message "Entering HCODE context"))
					:match-func (lambda(msg)
						      (when msg
							(string-match-p "^/hcode" (mu4e-message-field msg :maildir))))
					:vars '(
						(user-mail-address . "jelle.helsen@hcode.be")
						(user-full-name    . "Jelle Helsen")
						(mu4e-compose-signature . "With kind regards,\nJelle Helsen")
						(message-sendmail-extra-arguments . ("-a" "personal"))
						)
					)
				      ,(make-mu4e-context
					:name "devoteam"
					:enter-func (lambda () (mu4e-message "Entering DevoTeam context"))
					:match-func (lambda(msg)
						      (when msg
							(string-match-p "^/devoteam" (mu4e-message-field msg :maildir))))
					:vars '(
						(user-mail-address . "jelle.helsen@devoteam.com")
						(user-full-name    . "Jelle Helsen")
						(mu4e-compose-signature . "With kind regards,\nJelle Helsen")
						(message-sendmail-extra-arguments . ("-a" "devoteam"))
						)
					)
				      )
				    )
			(setq mu4e-context-policy 'pick-first)
			)
#+END_SRC

#+RESULTS:
: pick-first
** Shortcuts
#+BEGIN_SRC emacs-lisp
  (setq mu4e-maildir-shortcuts
	'(
	  ("/hcode/INBOX" . ?g)
	  ("/devoteam/INBOX" . ?d)
	  ))
#+END_SRC

#+RESULTS:
: ((/hcode/INBOX . 103) (/devoteam/INBOX . 100))
** Bookmarks
#+BEGIN_SRC emacs-lisp
  (setq mu4e-bookmarks
	`(("flag:unread AND NOT flag:trashed AND NOT maildir:/All.Mail/" "Unread messages" ?u)
	  ("date:today..now AND NOT flag:trashed AND NOT maildir:/All.Mail/ AND NOT maildir:/Trash/" "Today's messages" ?t)
	  ("date:7d..now AND NOT maildir:/All.Mail/ AND NOT maildir:/Trash/" "Last 7 days" ?w)
	  ("mime:image/* AND NOT maildir:/All.Mail/ AND NOT maildir:/Trash/" "Messages with images" ?p)
	  ("maildir:/INBOX/" "All inboxes" ?i)
	  ("maildir:/All.Mail/" "All mail" ?a))
)
#+END_SRC

#+RESULTS:
| flag:unread AND NOT flag:trashed AND NOT maildir:/All.Mail/                             | Unread messages      | 117 |
| date:today..now AND NOT flag:trashed AND NOT maildir:/All.Mail/ AND NOT maildir:/Trash/ | Today's messages     | 116 |
| date:7d..now AND NOT maildir:/All.Mail/ AND NOT maildir:/Trash/                         | Last 7 days          | 119 |
| mime:image/* AND NOT maildir:/All.Mail/ AND NOT maildir:/Trash/                         | Messages with images | 112 |
| maildir:/INBOX/                                                                         | All inboxes          | 105 |
| maildir:/All.Mail/                                                                      | All mail             |  97 |
** Display options
   #+begin_src emacs-lisp
     (setq mu4e-view-show-images t
	   mu4e-view-show-addresses 't)
   #+end_src

   #+RESULTS:
   : t

** Sending
   #+BEGIN_SRC emacs-lisp
     (setq message-send-mail-function 'smtpmail-send-it)
     (require 'smtpmail)
   #+END_SRC

#+RESULTS:
: smtpmail

** Don't Start it!
   #+begin_src emacs-lisp
   ;; (mu4e t)
   #+end_src

   #+RESULTS:

** Notifications
   #+begin_src emacs-lisp
     (use-package mu4e-alert
       :after mu4e
       :config
       ;; Show unread emails from all inboxes
       (setq mu4e-alert-interesting-mail-query 
	     (concat
	      "flag:unread maildir:/hcode/INBOX "
	      "OR "
	      "maildir:/devoteam/INBOX flag:unread")
	     )
       (mu4e-alert-enable-mode-line-display)

       ;; Show notifications for mails already notified
       (setq mu4e-alert-notify-repeated-mails nil)

       (mu4e-alert-enable-notifications))

   #+end_src

   #+RESULTS:
   : t
** Prevent trashing
   #+begin_src emacs-lisp
     ;; don't save message to Sent Messages, Gmail/IMAP takes care of this
     (setq mu4e-sent-messages-behavior 'delete

	   ;; don't need to run cleanup after indexing for gmail
	   mu4e-index-cleanup nil

	   ;; because gmail uses labels as folders we can use lazy check since
	   ;; messages don't really "move"
	   mu4e-index-lazy-check t)

     ;; In my workflow, emails won't be moved at all. Only their flags/labels are
     ;; changed. Se we redefine the trash and refile marks not to do any moving.
     ;; However, the real magic happens in `+mu4e|gmail-fix-flags'.
     ;;
     ;; Gmail will handle the rest.
     (defun +mu4e--mark-seen (docid _msg target)
       (mu4e~proc-move docid (mu4e~mark-check-target target) "+S-u-N"))
    (setf (alist-get 'trash mu4e-marks)
          (list :char '("d" . "▼")
                :prompt "dtrash"
                :dyn-target (lambda (_target msg) (mu4e-get-trash-folder msg))
                :action #'+mu4e--mark-seen)
          ;; Refile will be my "archive" function.
          (alist-get 'refile mu4e-marks)
          (list :char '("r" . "▼")
                :prompt "rrefile"
                :dyn-target (lambda (_target msg) (mu4e-get-refile-folder msg))
                :action #'+mu4e--mark-seen))

    ;; This hook correctly modifies gmail flags on emails when they are marked.
    ;; Without it, refiling (archiving), trashing, and flagging (starring) email
    ;; won't properly result in the corresponding gmail action, since the marks
    ;; are ineffectual otherwise.
    (add-hook 'mu4e-mark-execute-pre-hook
      (defun +mu4e-gmail-fix-flags-h (mark msg)
        (pcase mark
          (`trash  (mu4e-action-retag-message msg "-\\Inbox,+\\Trash,-\\Draft"))
          (`refile (mu4e-action-retag-message msg "-\\Inbox"))
          (`flag   (mu4e-action-retag-message msg "+\\Starred"))
          (`unflag (mu4e-action-retag-message msg "-\\Starred")))))

   #+end_src

   #+RESULTS:
   | +mu4e-gmail-fix-flags-h |

   #+begin_src emacs-lisp
     ;; (defun remove-nth-element (nth list)
     ;;   (if (zerop nth) (cdr list)
     ;; 	 (let ((last (nthcdr (1- nth) list)))
     ;; 	   (setcdr last (cddr last))
     ;; 	   list)))
     ;; (setq mu4e-marks (remove-nth-element 5 mu4e-marks))
     ;; (add-to-list 'mu4e-marks
     ;; 		  '(trash
     ;; 		    :char ("d" . "▼")
     ;; 		    :prompt "dtrash"
     ;; 		    :dyn-target (lambda (target msg) (mu4e-get-trash-folder msg))
     ;; 		    :action (lambda (docid msg target) 
     ;; 			      (mu4e~proc-move docid
     ;; 					      (mu4e~mark-check-target target) "-N"))))

   #+end_src

   #+RESULTS:
   | trash     | :char | (d . ▼)  | :prompt | dtrash     | :dyn-target  | (lambda (target msg) (mu4e-get-trash-folder msg))             | :action | (lambda (docid msg target) (mu4e~proc-move docid (mu4e~mark-check-target target) -N))                                    |
   | refile    | :char | (r . ▶)  | :prompt | refile     | :dyn-target  | (lambda (target msg) (mu4e-get-refile-folder msg))            | :action | (lambda (docid msg target) (mu4e~proc-move docid (mu4e~mark-check-target target) -N))                                    |
   | delete    | :char | (D . x)  | :prompt | Delete     | :show-target | (lambda (target) delete)                                      | :action | (lambda (docid msg target) (mu4e~proc-remove docid))                                                                     |
   | flag      | :char | (+ . ✚)  | :prompt | +flag      | :show-target | (lambda (target) flag)                                        | :action | (lambda (docid msg target) (mu4e~proc-move docid nil +F-u-N))                                                            |
   | move      | :char | (m . ▷)  | :prompt | move       | :ask-target  | mu4e~mark-get-move-target                                     | :action | (lambda (docid msg target) (mu4e~proc-move docid (mu4e~mark-check-target target) -N))                                    |
   | read      | :char | (! . ◼)  | :prompt | !read      | :show-target | (lambda (target) read)                                        | :action | (lambda (docid msg target) (mu4e~proc-move docid nil +S-u-N))                                                            |
   | unflag    | :char | (- . ➖) | :prompt | -unflag    | :show-target | (lambda (target) unflag)                                      | :action | (lambda (docid msg target) (mu4e~proc-move docid nil -F-N))                                                              |
   | untrash   | :char | (= . ▲)  | :prompt | =untrash   | :show-target | (lambda (target) untrash)                                     | :action | (lambda (docid msg target) (mu4e~proc-move docid nil -T))                                                                |
   | unread    | :char | (? . ◻)  | :prompt | ?unread    | :show-target | (lambda (target) unread)                                      | :action | (lambda (docid msg target) (mu4e~proc-move docid nil -S+u-N))                                                            |
   | unmark    | :char |          | :prompt | unmark     | :action      | (mu4e-error No action for unmarking)                          |         |                                                                                                                          |
   | action    | :char | (a . ◯)  | :prompt | action     | :ask-target  | (lambda nil (mu4e-read-option Action:  mu4e-headers-actions)) | :action | (lambda (docid msg actionfunc) (save-excursion (when (mu4e~headers-goto-docid docid) (mu4e-headers-action actionfunc)))) |
   | something | :char | (* . ✱)  | :prompt | *something | :action      | (mu4e-error No action for deferred mark)                      |         |                                                                                                                          |
** GPG
   #+begin_src emacs-lisp
     (setenv "GPG_AGENT_INFO" nil)
     (use-package pinentry
       :config
       (pinentry-start)
       )
     ;; (add-hook 'mu4e-compose-mode-hook 'mml-secure-message-sign)
   #+end_src

   #+RESULTS:
   : t

** notmuch
   #+begin_src emacs-lisp
     (use-package notmuch
       :config
       (add-hook 'notmuch-hello-hook (lambda()(message "notmuch-hello-hook")))
       )
   #+end_src

   #+RESULTS:
   : t

** GNUS
   #+begin_src emacs-lisp
     (setenv "GPG_AGENT_INFO" nil)
     (setq user-mail-address "jelle.helsen@hcode.be"
	   user-full-name "Jelle Helsen")

     (setq gnus-summary-line-format "%U%R %-18,18&user-date; %4L:%-25,25f %B%s\n")
     (setq nnmail-expiry-wait 'immediate)

     (setq gnus-select-method '(nnnil ""))
     (setq gnus-secondary-select-methods
	   '((nntp "news.gwene.org")
	     (nntp "news.eternal-september.org")
	     (nnimap "hcode"
		     (nnimap-address "imap.gmail.com")
		     (nnimap-server-port 993)
		     (nnimap-stream ssl)
		     (nnimap-streaming t)
		     (nnimap-record-commands nil)
		     (nnimap-list-pattern ("INBOX"))
		     (nnmail-expiry-wait immediate)
		     )
	     (nnimap "devoteam"
		     (nnimap-address "imap.gmail.com")
		     (nnimap-server-port 993)
		     (nnimap-stream ssl)
		     (nnimap-streaming t)
		     (nnimap-record-commands nil)
		     (nnimap-list-pattern ("INBOX"))
		     (nnmail-expiry-wait immediate)
		     )
	     )
	   gnus-novice-user t
	   gnus-expert-user nil
	   gnus-agent nil
	   )
     ;; Reply to mails with matching email address
     (setq gnus-posting-styles
	   '((".*" ; Matches all groups of messages
	      (address "JelleHelsen <jelle.helsen@hcode.be>"))
	     ("devoteam" ; Matches Gnus group called "devoteam"
	      (address "Jelle Helsen <jelle.helsen@devoteam.com>")
	      (organization "Devoteam")
	      ;; (signature-file "~/.signature-work")
	      ("X-Message-SMTP-Method" "smtp smtp.gmail.com 587 jelle.helsen@devoteam.com"))))

     (setq auth-source-debug t)
     (setq nnimap-record-commands t)

     (add-hook 'gnus-group-mode-hook #'gnus-topic-mode)

     (setq smtpmail-smtp-server "smtp.gmail.com"
	   smtpmail-smtp-service 587
	   gnus-ignored-newsgroups nil)


   #+end_src

   #+RESULTS:

** Keybindings
   #+begin_src emacs-lisp
     (jh/leader-key-def
       "m" '(:ignore t :which-key "mail")
       "mm" 'gnus
       "mc" 'compose-mail
       )
   #+end_src

   #+RESULTS:

* Terminals
** term-mode
   Configure the built-in term-mode
   #+begin_src emacs-lisp
     ;; (use-package term
     ;; 	    :config
     ;; 	    (setq explicit-shell-file-name "bash") ;; Change this to zsh, etc
     ;; 	    ;;(setq explicit-zsh-args '())         ;; Use 'explicit-<shell>-args for shell-specific args

     ;; 	    ;; Match the default Bash shell prompt.  Update this if you have a custom prompt
     ;; 	    ;; (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")
     ;; )

     ;; 	  (use-package eterm-256color
     ;; 	    :hook (term-mode . eterm-256color-mode))

   #+end_src

   #+RESULTS:
   | eterm-256color-mode | evil-collection-term-escape-stay | evil-collection-term-sync-state-and-mode |

** shell-pop
   #+begin_src emacs-lisp
     (push (cons "\\*shell\\*" display-buffer--same-window-action) display-buffer-alist)
     (use-package shell-pop
       :config
       (setq 
	shell-pop-cleanup-buffer-at-process-exit t
	shell-pop-autocd-to-working-dir t
	shell-pop-full-span t
	)
       )

    (jh/leader-key-def
    "tt" 'shell-pop
    )
   #+end_src

   #+RESULTS:
   
   #+begin_src emacs-lisp
   #+end_src

   #+RESULTS:

* Trying out new emacs packages
  #+begin_src emacs-lisp
    (use-package try)
  #+end_src

  #+RESULTS:
* Help
  #+begin_src emacs-lisp
    (jh/leader-key-def
    "h" '(:ignore t :which-key "help")
    "hf" '(counsel-describe-function :which-key "Describe function")
    "hv" '(counsel-describe-variable :which-key "Describe variable")
    )
  #+end_src

  #+RESULTS:
* Tests
  #+begin_src emacs-lisp
  #+end_src
* IRC
  #+begin_src emacs-lisp
  (setq erc-nick "j3ll3")
  #+end_src

  #+RESULTS:
  : j3ll3
